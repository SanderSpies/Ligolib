type advisorAlgo = ((a: int) => bool);

export type advisorStorage = {
    indiceAddress : address,
    algorithm : advisorAlgo,
    result : bool
};

export type advisorEntrypoints = ["ChangeAlgorithm", advisorAlgo] | ["ExecuteAlgorithm"];

export type advisorFullReturn =  [list<operation>, advisorStorage];

let missing_entrypoint_sendvalue : string = "the targeted contract has not entrypoint sendValue";

let change = ([p, s] : [advisorAlgo, advisorStorage]) : advisorFullReturn => {
    return [(list([]) as list<operation>), { ...s, algorithm: p}]
};

let executeAlgorithm = (s : advisorStorage) : advisorFullReturn => {
    let indiceValOpt : option<int> = Tezos.call_view("indice_value", unit, s.indiceAddress);
    let indiceVal : int = match (indiceValOpt , {
        None: () => (failwith("unknown indice value") as int),
        Some: (v: int) => v
    });
    return [(list([]) as list<operation>), { ...s, result: s.algorithm(indiceVal) }]
};

let advisorMain = ([ep, store] : [advisorEntrypoints, advisorStorage]) : advisorFullReturn => {
    return match (ep, {
        ChangeAlgorithm: (p: advisorAlgo) => change(p, store),
        ExecuteAlgorithm: (_p: unit) => executeAlgorithm(store) 
    });
};
