type storage = bool

type parameter = ["Exec", list<int>] | ["Nothing"]

let func = (l : list<int>) : [list<operation>, storage] => {
    let mean = (l : list<int>) : int => {
        let compute = ( [accnb, elt] : [[int, nat], int] ) : [int, nat] => [(accnb[0] + elt as int), (accnb[1] + (1 as nat))];
        let [sum, size] : [int, nat] = List.fold(compute, l, [(0 as int), (0 as nat)]);
        if (size == (0 as nat)) { return 0 } else { return (sum / size) };
    };
    return [(list([]) as list<operation>), (mean(l) < 5)]
};

let main = ([p, s] : [parameter, storage]) : [list<operation>, storage] => {
    return match (p, {
        Exec: (l: list<int>) => func(l),
        Nothing: (_p: unit) => [(list([]) as list<operation>), s] 
    });
}