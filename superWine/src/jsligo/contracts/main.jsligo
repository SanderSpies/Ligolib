#import "storage.jsligo" "Storage"
#import "parameter.jsligo" "Parameter"
#import "generic_fa2/core/instance/NFT.mligo" "NFT_FA2"
//#import "views.mligo" "Views"
//#import "errors.mligo" "Errors"
//#import "conditions.mligo" "Conditions"

export type storage = Storage.t;
export type parameter = Parameter.t;
export type return_ = [list<operation>, storage];

type store = NFT_FA2.Storage.t;
type ext = NFT_FA2.extension;
type ext_storage = store<ext>;

let generateCollection = ([param, store] : [Parameter.generate_collection_param, Storage.t]) : return_ => {
    // create new collection
    let token_ids = param.token_ids;
    let ledger = (Big_map.empty as NFT_FA2.Storage.Ledger.t);
    let myfunc = ([acc, elt] : [NFT_FA2.Storage.Ledger.t, nat]) : NFT_FA2.Storage.Ledger.t => Big_map.add(elt, Tezos.sender, acc);
    let new_ledger : NFT_FA2.Storage.Ledger.t = List.fold(myfunc, token_ids, ledger);

    let token_usage = (Big_map.empty as NFT_FA2.TokenUsage.t);
    let initial_usage = ([acc, elt] : [NFT_FA2.TokenUsage.t, nat]) : NFT_FA2.TokenUsage.t => Big_map.add(elt, (0 as nat), acc);
    let new_token_usage = List.fold(initial_usage, token_ids, token_usage);

    let token_metadata = param.token_metas;
    let operators = (Big_map.empty as NFT_FA2.Storage.Operators.t);
    

    let initial_storage : ext_storage = {
        ledger:new_ledger,
        operators:operators,
        token_ids:token_ids,
        token_metadata:token_metadata,
        extension : {
          admin:Tezos.sender,
          token_usage:new_token_usage,
        }
    };

    let initial_delegate : option<key_hash> = (None() as option<key_hash>);
    let initial_amount : tez = 1 as tez;
    let create_my_contract = (p: [option<key_hash>, tez, ext_storage]) : [operation, address] =>
      (Michelson `{ 
            UNPAIR ;
            UNPAIR ;
            CREATE_CONTRACT 
#include "generic_fa2/compiled/fa2_nft.tz"  
               ;
            PAIR }`
            as ((p: [option<key_hash>, tez, ext_storage]) => [operation, address]) )(p)
   ;

    let originate : [operation, address] = create_my_contract(initial_delegate, initial_amount, initial_storage);
    // insert into collections
    let new_all_collections = Big_map.add(originate[1], Tezos.sender, store.all_collections);
    // insert into owned_collections
    let new_owned_collections = match(Big_map.find_opt(Tezos.sender, store.owned_collections), {
      None: () => Big_map.add( Tezos.sender, (list([originate[1]]) as list<address>), store.owned_collections),
      Some: (addr_lst: list<address>) => Big_map.update( Tezos.sender, (Some( list([originate[1], ...addr_lst]) )), store.owned_collections)
    });
    return [list([originate[0]]), { ...store, all_collections:new_all_collections, owned_collections:new_owned_collections}];
};

export let main = ([ep, store] : [parameter, storage]) : return_ => {
    match(ep, { 
      GenerateCollection: (p: Parameter.generate_collection_param) => generateCollection(p, store),
      Nothing: () => [(list([]) as list<operation>), store]
    });
};
