
#import "../contracts/main.jsligo" "Factory"

type fa2_storage = Factory.NFT_FA2.Storage.t;
type ext = Factory.NFT_FA2.extension;
type ext_fa2_storage = fa2_storage<ext>;

let assert_string_failure = ([res, expected] : [test_exec_result, string]) : unit => {
  let expected_ = Test.eval(expected);
  match(res, {
    Fail: (err: test_exec_error) => match(err, {
        Rejected: (p: [prg, _addr]) => assert (Test.michelson_equal(p[0], expected_)),
        Other: () => failwith("contract failed for an unknown reason")
    }),
    Success: (_gas: nat) => failwith("contract did not failed but was expected to fail")
  });
};

let test = () : unit => {
    // setup 4 accounts 
    let _ = Test.reset_state(4 as nat, (list([]) as list<tez>));
    const alice: address = Test.nth_bootstrap_account(0);
    const bob: address = Test.nth_bootstrap_account(1);
    const steven: address = Test.nth_bootstrap_account(2);
    const frank: address = Test.nth_bootstrap_account(3);

    // originate Factory smart contract
    let init_storage : Factory.Storage.t = { 
        all_collections:(Big_map.empty as big_map<Factory.Storage.collectionContract, Factory.Storage.collectionOwner>),
        owned_collections:(Big_map.empty as big_map<Factory.Storage.collectionOwner, list<Factory.Storage.collectionContract>> )
    };
    const [addr,_,_] = Test.originate(Factory.main, init_storage, 0 as tez);

    let _generates_collection_1_should_works = () : unit => {
        let _print = Test.log("_generates_collection_1_should_works");

        let x : contract<Factory.parameter> = Test.to_contract(addr);

        // prepare arguments for generating a new collection
        let token_ids : list<nat> = list([(1 as nat)]);
        let token_info_1 : map<string, bytes> = Map.literal( list([
            ["QRcode", 0x623d82eff132] 
        ]));
        //let token_info_1_data : Factory.NFT_FA2.NFT.TokenMetadata.data = { token_id: (1 as nat), token_info: token_info_1 };
        let token_metadata : Factory.NFT_FA2.NFT.TokenMetadata.t = Big_map.literal( list([
            [1 as nat, { token_id: (1 as nat), token_info: token_info_1 }]
        ]));

        // call GenerateCollection entrypoint
        let _src = Test.set_source(alice);
        let gencol_args : Factory.Parameter.generate_collection_param = {name:"alice_collection_1", token_ids:token_ids, token_metas:token_metadata};
        let _ = Test.transfer_to_contract_exn(x, (GenerateCollection(gencol_args)), (1000000 as mutez));

        // verify FA2 has been created
        let s : Factory.storage = Test.get_storage(addr);
        let colls : list<address> = match(Big_map.find_opt(alice, s.owned_collections), {
            None: () => (list([]) as list<address>),
            Some: (x: list<address>) => x
        });
        let owned_coll_size = List.fold( (([acc, elt] : [nat, address]) : nat => acc + (1 as nat)), colls, (0 as nat));
        //let owned_coll_size : nat = Set.size colls in 
        assert (owned_coll_size == (1 as nat))
    };

    let _mint_token2_collection_1_should_works = () : string => {
        let _testname = Test.log("_mint_token2_collection_1_should_works");
        //let x : Factory.parameter contract = Test.to_contract addr;

        // Retrieve address of collection 1
        let s_before : Factory.storage = Test.get_storage(addr);
        let colls_before : list<address> = match(Big_map.find_opt(alice, s_before.owned_collections), {
            None: () => (list([]) as list<address>),
            Some: (oc: list<address>) => oc
        });
        //let colls_before_list : address list = Set.fold (fun(acc, i : address list * address) -> i :: acc) colls_before ([] : address list);
        let address1 : address = Option.unopt (List.head_opt(colls_before));

        // prepare mint arguments
        //let () = Test.log("alice mint token 2 in collection 1");
        let extra_token_id : nat = (2 as nat);
        let extra_token_ids : list<nat> = list([extra_token_id]);
        let extra_token_info : map<string, bytes> = Map.literal( list([ ["QRcode", 0x6269c0f1a821] ]));
        let extra_token_metadata : big_map<nat, map<string, bytes> > = Big_map.literal( list([ [extra_token_id, extra_token_info] ]));

        // call MINT
        let _src = Test.set_source(alice);
        let taddr1 = (Test.cast_address(address1) as typed_address<Factory.NFT_FA2.parameter, ext_fa2_storage> );
        let fa2_1 : contract<Factory.NFT_FA2.parameter> = Test.to_contract(taddr1);
        let mint_args : Factory.NFT_FA2.NFT.mint_param = { ids:extra_token_ids, metas:extra_token_metadata };
        let _ = Test.transfer_to_contract_exn(fa2_1, (Mint(mint_args)), (0 as mutez));

        // verify token2 is created and owned by alice
        //let () = Test.log("check new token 2");
        let fa2_1_s : ext_fa2_storage = Test.get_storage(taddr1);
        let _tst = assert( (Factory.NFT_FA2.Storage.is_owner_of(fa2_1_s)(alice))(2 as nat) );
        "OK"
    };
    let _mint_token3_collection_1_should_fail = () : unit => {
        let _print = Test.log("_mint_token3_collection_1_should_fail");

        let x : contract<Factory.parameter> = Test.to_contract(addr);

        // Retrieve address of collection 1
        let s_before : Factory.storage = Test.get_storage(addr);
        let colls_before : list<address> = match(Big_map.find_opt(alice, s_before.owned_collections), {
            None: () => (list([]) as list<address>),
            Some: (oc: list<address>) => oc
        });
        //let colls_before_list : address list = Set.fold (fun(acc, i : address list * address) -> i :: acc) colls_before ([] : address list);
        let address1 : address = Option.unopt (List.head_opt(colls_before));

        // prepare mint arguments
        //let () = Test.log("alice mint token 3 in collection 1");
        let extra_token_id : nat = (3 as nat);
        let extra_token_qrcode : bytes = 0x92a77bf1a4c5;
        let extra_token_ids : list<nat> = list([extra_token_id]);
        let extra_token_info : map<string, bytes> = Map.literal( list([ ["QRcode", extra_token_qrcode] ]));
        let extra_token_metadata : big_map<nat, map<string, bytes>> = Big_map.literal( list([ [extra_token_id, extra_token_info] ]));

        // call MINT
        let _src = Test.set_source(bob);
        let taddr1 = (Test.cast_address(address1) as typed_address<Factory.NFT_FA2.parameter, ext_fa2_storage>);
        let fa2_1 : contract<Factory.NFT_FA2.parameter> = Test.to_contract(taddr1);
        let mint_args : Factory.NFT_FA2.NFT.mint_param = { ids:extra_token_ids, metas:extra_token_metadata };
        let fail_mint_token3 = Test.transfer_to_contract(fa2_1, (Mint(mint_args)), 0 as mutez);
        assert_string_failure( fail_mint_token3, Factory.NFT_FA2.Errors.only_admin);
    };
    let _generates_collection_2_with_5_tokens_should_works = () : string => {
        let _print = Test.log("_generates_collection_2_with_5_tokens_should_works");
        // check existing collections
        let s_before : Factory.storage = Test.get_storage(addr);
        let colls_before : list<address> = match(Big_map.find_opt(alice, s_before.owned_collections), {
            None: () => (list([]) as list<address>),
            Some: (x: list<address>) => x
        });
        //let colls_before_list : address list = Set.fold (fun(acc, i : address list * address) -> i :: acc) colls_before ([] : address list);
        let address1 : address = Option.unopt (List.head_opt(colls_before));

        let x : contract<Factory.parameter> = Test.to_contract(addr);

        //let () = Test.log("alice generates a collection 2");
        let _src = Test.set_source(alice);
 
        // set new collection 2
        let token_ids : list<nat> = list([(1 as nat), (2 as nat), (3 as nat), (4 as nat), (5 as nat)]);

        // add specific metadata for each token
        let token_info_1 : map<string, bytes> = Map.literal( list([ ["QRcode", 0x623d82eff132] ]));
        let token_info_2 : map<string, bytes> = Map.literal( list([ ["QRcode", 0x49aa82eff132] ]));
        let token_info_3 : map<string, bytes> = Map.literal( list([ ["QRcode", 0xab3442eff132] ]));
        let token_info_4 : map<string, bytes> = Map.literal( list([ ["QRcode", 0xdeadbeefdead] ]));
        let token_info_5 : map<string, bytes> = Map.literal( list([ ["QRcode", 0xdeadbeefbeef] ]));

        let token_metadata : Factory.NFT_FA2.NFT.TokenMetadata.t = Big_map.literal( list([
            [(1 as nat), { token_id:(1 as nat), token_info:token_info_1 } ],
            [(2 as nat), { token_id:(2 as nat), token_info:token_info_2 } ],
            [(3 as nat), { token_id:(3 as nat), token_info:token_info_3 } ],
            [(4 as nat), { token_id:(4 as nat), token_info:token_info_4 } ],
            [(5 as nat), { token_id:(5 as nat), token_info:token_info_5 } ]
        ]));

        // add global metadatas to all tokens
        let collection_name_bytes : bytes = Bytes.pack("Pietrus 2022");
        let global_metadatas : map<string, bytes> = Map.literal( list([ ["collection", collection_name_bytes] ])); 
        let new_token_metadata = ((Factory.NFT_FA2.NFT.TokenMetadata.add_global_metadata(token_ids))(token_metadata))(global_metadatas);

        // generate collection
        let gencol_args : Factory.Parameter.generate_collection_param = {name:"alice_collection_1", token_ids:token_ids, token_metas:new_token_metadata};
        let _ = Test.transfer_to_contract_exn(x, (GenerateCollection(gencol_args)), 1000000 as mutez);

        let s : Factory.storage = Test.get_storage(addr);
        // verify number of collections
        let colls : list<address> = match(Big_map.find_opt(alice, s.owned_collections), {
            None: () => (list([]) as list<address>),
            Some: (x: list<address>) => x
        });
        //let owned_coll_size : nat = Set.size colls in 
        let owned_coll_size = List.fold( ( ([acc, elt] : [nat, address]) : nat => acc + (1 as nat)), colls, (0 as nat));
        let _tst = assert (owned_coll_size == (2 as nat));

        let parse_metas = ([acc, elt] : [big_map<address, [list<nat>, Factory.NFT_FA2.NFT.TokenMetadata.t]>, address]) : big_map<address, [list<nat>, Factory.NFT_FA2.NFT.TokenMetadata.t]> => { 
            let taddr = (Test.cast_address(elt) as typed_address<Factory.NFT_FA2.parameter, ext_fa2_storage>);
            let fa2_store : ext_fa2_storage = Test.get_storage(taddr);
            return Big_map.add(elt, [fa2_store.token_ids, fa2_store.token_metadata], acc);
        };
        let all_tokens : big_map<address, [list<nat>, Factory.NFT_FA2.NFT.TokenMetadata.t]> = List.fold(parse_metas, colls, (Big_map.empty as big_map<address, [list<nat>, Factory.NFT_FA2.NFT.TokenMetadata.t]>) ); 
        
        // Retrieve collection 2 address
        //let colls_list : list<address> = Set.fold( ( ([acc, i] : [list<address>, address]) => [i, ...acc]), colls, (list([]) as list<address>));
        // find address of collection 2
        let get_next_address = ([lst, blacklist] : [list<address>, list<address>]) : address => {
            let filter = ([acc, elt] : [[list<address>, list<address>], address]) : [list<address>, list<address>] => { 
                let is_in_list = ([res, i] : [[bool, address], address]) : [bool, address] => { if (res[0]) { return res } else { return [(i == res[1]), res[1]] } };
                let [is_blacklisted, _] = List.fold(is_in_list, acc[1], [false, elt]);
                if (is_blacklisted) { return acc } else { return [ list([elt, ...acc[0]]), acc[1]] }
            };
            let [filtered_list, _] = List.fold(filter, lst, [(list([]) as list<address>), blacklist]);
            Option.unopt (List.head_opt(filtered_list))
        };
        let address2 : address = get_next_address(colls, colls_before);

        // verify token_ids of collection 1
        let collection1_info : [list<nat>, Factory.NFT_FA2.NFT.TokenMetadata.t] = match(Big_map.find_opt(address1, all_tokens), {
            None: () => (failwith("No metadata for collection 1") as [list<nat>, Factory.NFT_FA2.NFT.TokenMetadata.t]),
            Some: (info: [list<nat>, Factory.NFT_FA2.NFT.TokenMetadata.t]) => info
        });
        _tst = assert( collection1_info[0] == list([(2 as nat), (1 as nat)]) );
        // verify token_ids of collection 2 
        let collection2_info : [list<nat>, Factory.NFT_FA2.NFT.TokenMetadata.t] = match(Big_map.find_opt(address2, all_tokens), {
            None: () => (failwith("No metadata for collection 2") as [list<nat>, Factory.NFT_FA2.NFT.TokenMetadata.t]),
            Some: (info: [list<nat>, Factory.NFT_FA2.NFT.TokenMetadata.t]) => info
        });
        let _tst = assert( collection2_info[0] == list([(1 as nat), (2 as nat), (3 as nat), (4 as nat), (5 as nat)]) );
        // verify metadata of token 3 of collection 2
        let collection2_metas : Factory.NFT_FA2.NFT.TokenMetadata.t = collection2_info[1];
        let collection2_metas_tok3 : Factory.NFT_FA2.NFT.TokenMetadata.data = match(Big_map.find_opt((3 as nat), collection2_metas), {
            None: () => (failwith("No token 3 in this collection") as Factory.NFT_FA2.NFT.TokenMetadata.data),
            Some: (info: Factory.NFT_FA2.NFT.TokenMetadata.data) => info
        });
        let _ass = assert(collection2_metas_tok3.token_info == (Map.literal( list([ ["QRcode", 0xab3442eff132], ["collection", collection_name_bytes] ])) as map<string, bytes>));
        // verify metadata of token 4 of collection 2
        let collection2_metas_tok4 : Factory.NFT_FA2.NFT.TokenMetadata.data = match(Big_map.find_opt((4 as nat), collection2_metas), {
            None: () => (failwith("No token 4 in this collection") as Factory.NFT_FA2.NFT.TokenMetadata.data),
            Some: (info: Factory.NFT_FA2.NFT.TokenMetadata.data) => info
        });
        _tst = assert(collection2_metas_tok4.token_info == (Map.literal( list([ ["QRcode", 0xdeadbeefdead], ["collection", collection_name_bytes] ])) as map<string, bytes>));
        "OK" 
    };
    let _transfer_token1_collection_2_should_works = () : string => {
        let _print = Test.log("_transfer_token1_collection_2_should_works");
        // retrieve address collection 2
        let s_before : Factory.storage = Test.get_storage(addr);
        let colls_before : list<address> = match(Big_map.find_opt(alice, s_before.owned_collections), {
            None: () => (list([]) as list<address>),
            Some: (x: list<address>) => x
        });
        let address2 : address = Option.unopt (List.head_opt(colls_before));

        _print = Test.log("alice transfer tok 1 to bob");
        let _src = Test.set_source(alice);
        let taddr2 = (Test.cast_address(address2) as typed_address<Factory.NFT_FA2.parameter, ext_fa2_storage> );
        let fa2_2 : contract<Factory.NFT_FA2.parameter> = Test.to_contract(taddr2);
        let transfer1_args : Factory.NFT_FA2.NFT.transfer = list([{ from_:alice, tx: list([{to_:bob, token_id:(1 as nat)}]) }]);
        let _exec = Test.transfer_to_contract_exn(fa2_2, (Transfer(transfer1_args)), 0 as mutez);

        let fa2_2_s : ext_fa2_storage = Test.get_storage(taddr2);
        let _tst = assert( (((Factory.NFT_FA2.Storage.is_owner_of(fa2_2_s))(bob))(1 as nat)) );
        _tst = assert( ((Factory.NFT_FA2.get_usage_of(fa2_2_s))(1 as nat)) == (1 as nat) );
        _tst = assert( (((Factory.NFT_FA2.Storage.is_owner_of(fa2_2_s))(alice))(2 as nat)) ); 
        _tst = assert( ((Factory.NFT_FA2.get_usage_of(fa2_2_s))(2 as nat)) == (0 as nat) );
        _tst = assert( (((Factory.NFT_FA2.Storage.is_owner_of(fa2_2_s))(alice))(3 as nat)) );
        _tst = assert( ((Factory.NFT_FA2.get_usage_of(fa2_2_s))(3 as nat)) == (0 as nat) );
        _tst = assert( (((Factory.NFT_FA2.Storage.is_owner_of(fa2_2_s))(alice))(4 as nat)) );
        _tst = assert( ((Factory.NFT_FA2.get_usage_of(fa2_2_s))(4 as nat)) == (0 as nat) );
        _tst = assert( (((Factory.NFT_FA2.Storage.is_owner_of(fa2_2_s))(alice))(5 as nat)) );
        _tst = assert( ((Factory.NFT_FA2.get_usage_of(fa2_2_s))(5 as nat)) == (0 as nat) );

        _print = Test.log("bob transfer tok 1 to steven");
        _src = Test.set_source(bob);
        let fa2_2 : contract<Factory.NFT_FA2.parameter> = Test.to_contract(taddr2);
        let transfer1_args : Factory.NFT_FA2.NFT.transfer = list([{ from_:bob, tx:list([{to_:steven, token_id:(1 as nat)}]) }]);
        _exec = Test.transfer_to_contract_exn(fa2_2, (Transfer(transfer1_args)), 0 as mutez);

        let fa2_2_s : ext_fa2_storage = Test.get_storage(taddr2);
        _tst = assert( (((Factory.NFT_FA2.Storage.is_owner_of(fa2_2_s))(steven))(1 as nat)) );
        _tst = assert( ((Factory.NFT_FA2.get_usage_of(fa2_2_s))(1 as nat)) == (2 as nat) );
        "OK" 
    };
    
    // execution
    const _test_generates_collection_1_should_works = _generates_collection_1_should_works();
    const _test_mint_token2_collection_1_should_works = _mint_token2_collection_1_should_works();
    const _test_mint_token3_collection_1_should_fail = _mint_token3_collection_1_should_fail();
    const _test_generates_collection_2_with_5_tokens_should_works = _generates_collection_2_with_5_tokens_should_works();
    const _test_transfer_token1_collection_2_should_works = _transfer_token1_collection_2_should_works();
};


const test_1 = test();
